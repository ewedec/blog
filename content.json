{"meta":{"title":"超哥博客","subtitle":"打造码农的世界","description":null,"author":"Dingchao.Wu","url":"https://ewedwc.github.io"},"pages":[],"posts":[{"title":"Docker基础","slug":"Docker基础","date":"2018-11-14T02:52:58.000Z","updated":"2018-11-15T07:34:55.163Z","comments":true,"path":"categories/1d9fbb6a.html","link":"","permalink":"https://ewedwc.github.io/categories/1d9fbb6a.html","excerpt":"","text":"1.安装Docker linux安装Docker12345678#安装curl命令sudo apt-get install curl#安装Dockercurl -fsSl https://get.Docker.com |sh#检查Dockersudo docker version#将当前用户添加到docker组中免敲sudo命令sudo useradd -aG docker 当前用户名 1234567#使用不同的的源 官方源: curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add - add-apt-repository &quot;deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) st able&quot;阿里云的源&#123;推荐&#125; curl -fsSL https://mirrors.aliyun.com/docker-ce/linux/ubuntu/gpg | sudo apt-key add - add-apt-repository &quot;deb [arch=amd64] https://mirrors.aliyun.com/docker-ce/linux/ubuntu $(lsb_relea se -cs) stable&quot; Mac安装Docker 1官网下载Docker for Mac 进行安装 Docker 删除 123apt-get purge docke-ce -yrm -rf /var/lib/docer/rm - rf /etc/docker Docker加速器&emsp;&emsp;在国内使用docker的官方镜像源，会因为网络的原因，造成无法下载，或者一直处于超时。所以我们使用 daocloud 的方法进行加速配置。 2.Docker介绍 Docker是什么Docker是一个开源的容器引擎，它基于LXC（LXC又名Linux container，是一种虚拟化的解决方案，这种是内核级的虚拟化。(主流的解决方案Xen ,KVM, LXC)）容器技术，使用GO语言开发。遵循Apache2.0协议。Docker采用C/S架构，其可以为任何应用创建一个轻量级、可移植的、自给自足的容器。Docker就是一种快速解决生产问题的一种技术手段。 Docker的特点 三大理念：构建:&emsp;&emsp;将你需要的场景构建好，装在一个镜像中，就好比龙珠中的胶囊一样。运输:&emsp;&emsp;随身携带非常方便运行:&emsp;&emsp;只要在需要的地方一放，打开使用就OK了 优点:&emsp;&emsp;多: 试用场景多&emsp;&emsp;快: 环境部署快，更新快&emsp;&emsp;好: 好多人在用，东西好&emsp;&emsp;省: 省钱省力省人工 缺点:&emsp;&emsp;太腻歪人: 依赖操作系统&emsp;&emsp;不善于沟通: 依赖网络&emsp;&emsp;无法使用外部硬件","categories":[{"name":"运维之路","slug":"运维之路","permalink":"https://ewedwc.github.io/categories/运维之路/"}],"tags":[{"name":"docker","slug":"docker","permalink":"https://ewedwc.github.io/tags/docker/"}],"keywords":[{"name":"运维之路","slug":"运维之路","permalink":"https://ewedwc.github.io/categories/运维之路/"}]},{"title":"Python输出各类三角形","slug":"Python输出各类三角形","date":"2018-11-13T10:50:34.000Z","updated":"2018-11-13T14:31:59.377Z","comments":true,"path":"categories/db7c6f16.html","link":"","permalink":"https://ewedwc.github.io/categories/db7c6f16.html","excerpt":"","text":"Python输出各类三角形 今天面试被问了这个问题先将这类问题做个总结 1.打印左下角三角形：代码如下: 12345678910111213141516for i in range(n): for j in range(0,i): print(&quot;*&quot;end=&quot; &quot;) for k in range(i,n): print(&quot; &quot;,end=&quot; &quot;) print(&quot;&quot;) * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 2.打印右上角三角形：代码如下: 1234567891011121314151617for i in range(n): for j in range(0,i): print(&quot; &quot;,end=&quot; &quot;) for k in range(i,n): print(&quot;*&quot;,end=&quot; &quot;) print(&quot; &quot;) * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 3.打印等腰三角形代码如下: 12345678910111213141516171819def A(n): for i in range(n): for j in range(0, i): print(end=&quot; &quot;) for k in range(i, n): print(&quot;*&quot;, end=&quot; &quot;) print(&quot;&quot;)A(10) * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 4.打印等腰三角形代码如下: 1234567891011121314151617def A(n): for i in range(n): for j range(0,n-i): print(ent=&quot; &quot;) for k range(n-i,n): print(&quot;*&quot;,ent=&quot; &quot;) print(&quot;&quot;) * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *","categories":[{"name":"Python开发","slug":"Python开发","permalink":"https://ewedwc.github.io/categories/Python开发/"}],"tags":[{"name":"Python","slug":"Python","permalink":"https://ewedwc.github.io/tags/Python/"}],"keywords":[{"name":"Python开发","slug":"Python开发","permalink":"https://ewedwc.github.io/categories/Python开发/"}]},{"title":"冒泡排序","slug":"冒泡排序","date":"2018-11-13T09:40:17.000Z","updated":"2018-11-13T10:45:28.524Z","comments":true,"path":"categories/14e6f1eb.html","link":"","permalink":"https://ewedwc.github.io/categories/14e6f1eb.html","excerpt":"","text":"冒泡排序 冒泡排序的思想：每次比较两个相邻的元素，如果它们前一个比后一个大就交换俩个元素的位置，如果后一个元素比前一个元素大不处理。 代码思想:利用两个for循环进行操作，第一个for循环记录循环次数，第二个循环列表中未归位的最大的元素，已经归位的元素不再参与比较。 Python代码实现123456789#!/usr/bin/env Pythondef bubbleSort(nums) for i in range(len(nums)-1) for j in range(len(nums)-i-1) if nums[j]&gt;nums[j+1] nums[j],num[j+1] = nums[j+1],num[j] return numsnums = [5,2,4,1,6,1]print (bubbleSort(nums))","categories":[{"name":"Python开发","slug":"Python开发","permalink":"https://ewedwc.github.io/categories/Python开发/"}],"tags":[{"name":"Python","slug":"Python","permalink":"https://ewedwc.github.io/tags/Python/"},{"name":"算法","slug":"算法","permalink":"https://ewedwc.github.io/tags/算法/"}],"keywords":[{"name":"Python开发","slug":"Python开发","permalink":"https://ewedwc.github.io/categories/Python开发/"}]},{"title":"Python青蛙跳台阶问题","slug":"Python青蛙跳台阶问题","date":"2018-10-15T03:02:31.000Z","updated":"2018-11-15T04:39:06.421Z","comments":true,"path":"categories/d9104bdb.html","link":"","permalink":"https://ewedwc.github.io/categories/d9104bdb.html","excerpt":"","text":"1.斐波那契数列 斐波那契数列即著名的兔子数列：1、1、2、3、5、8、13、21、34、……数列特点：该数列从第三项开始，每个数的值为其前两个数之和，用python实现起来很简单： 12345a = 0b = 1while b&lt;1000: print(b) a,b = b,a+b 利用递归实现斐波那契数列前n项 1234567lis = []for i in range(20) if i ==0 or i ==1: lis.append(1) else: lis.append(list[i-2]+list[i-1])print(lis) 2.青蛙跳台阶问题，一只青蛙要跳上n层高的台阶，一次能跳一级，也可以跳两级，请问这只青蛙有多少种跳上这个n层高台阶的方法？ 方法1:递归 12345678class Solution: def climbStairs(self,n): if n ==1: return 1 elif n == 2: return 2 else: return self.climbStairs(n-1)+self.climbStairs(n-2) 方法2:用循环来替代递归 这种方法的原理仍然基于上面的公式，但是用循环代替了递归，比上面的代码效率上有较大的提升，可以AC代码实现如下： 12345678class Solution: def climbStairs(self,n) if n ==1 or n ==2: return n a=1;b=2;c=3 for i in range(3,n+1) c = a+b;a=b;b=c return c 方法3:建立简单的数学模型，利用数学公式 12345678910111213class Solution: # @param &#123;integer&#125; n # @return &#123;integer&#125; def climbStairs(self, n): def fact(n): result=1 for i in range(1,n+1): result*=i return result total=0 for i in range(n/2+1): total+=fact(i+n-2*i)/fact(i)/fact(n-2*i) return total 3.一只青蛙一次可以跳上1级台阶，也可以跳上2级……它也可以跳上n级。求该青蛙跳上一个n级的台阶总共有多少种跳法。 代码实现:1234def jump_floor(number): if number == 0: return 0 return 2**(number-1)","categories":[{"name":"Python开发","slug":"Python开发","permalink":"https://ewedwc.github.io/categories/Python开发/"}],"tags":[{"name":"Python","slug":"Python","permalink":"https://ewedwc.github.io/tags/Python/"},{"name":"算法","slug":"算法","permalink":"https://ewedwc.github.io/tags/算法/"}],"keywords":[{"name":"Python开发","slug":"Python开发","permalink":"https://ewedwc.github.io/categories/Python开发/"}]},{"title":"Python常用技巧","slug":"Python常用技巧","date":"2018-10-01T09:52:52.000Z","updated":"2018-11-14T17:16:42.419Z","comments":true,"path":"categories/ed00236b.html","link":"","permalink":"https://ewedwc.github.io/categories/ed00236b.html","excerpt":"","text":"1.1拆箱123456789101112131415161718&gt;&gt;&gt; a,b,c = 1,2,3&gt;&gt;&gt; a,b,c(1,2,3)&gt;&gt;&gt; a,b,c = [1,2,3]&gt;&gt;&gt; a,b,c[1,2,3]&gt;&gt;&gt; a,b,c = (2*i+1 in range(3))&gt;&gt;&gt; a,b,c(1,3,5)&gt;&gt;&gt; a,(b,c),d = [1,(2,3),4]&gt;&gt;&gt; a1&gt;&gt;&gt; b2&gt;&gt;&gt; c3&gt;&gt;&gt; d4 1.2拆箱变量交换1234&gt;&gt;&gt; a,b = 1,2&gt;&gt;&gt; a,b = b,a&gt;&gt;&gt; a,b(2,1) 1.3扩展拆箱（只兼容Python3）1234567&gt;&gt;&gt; a,*b,c = [1,2,3,4,5]&gt;&gt;&gt; a1&gt;&gt;&gt; b[2,3,4]&gt;&gt;&gt; c5 1.4 切割列表123&gt;&gt;&gt; a = [0,1,2,3,4,5,6,7,8,9,10]&gt;&gt;&gt; a[2:8][2,3,4,5,6,7] 1.5 负数索引切割列表123&gt;&gt;&gt; a = [0,1,2,3,4,5,6,7,8,9,10]&gt;&gt;&gt; a[-4,-2][7,8] 1.6指定步长切割列表1234567&gt;&gt;&gt; a = [0,1,2,3,4,5,6,7,8,9,10]&gt;&gt;&gt; a[::2][0,2,4,6,8,10]&gt;&gt;&gt; a[::3][0,3,6,9]&gt;&gt;&gt; a[2:8:2][2,4,6] 1.7负数步长切割列表12345&gt;&gt;&gt; a = [0,1,2,3,4,5,6,7,8,9,10]&gt;&gt;&gt; a =[::-1][10,9,8,7,6,5,4,3,2,1,0]&gt;&gt;&gt; a[::-2][10,8,6,4,2,0] 1.8列表切割赋值12345678910&gt;&gt;&gt; a = [1,2,3,4,5]&gt;&gt;&gt; a[2:3] = [0,0]&gt;&gt;&gt; a[1,2,0,0,4,5]&gt;&gt;&gt; a[1:1] = [8,9]&gt;&gt;&gt; a[1,8,9,2,0,0,4,5]&gt;&gt;&gt; a[1:-1] = []&gt;&gt;&gt; a[1,5] 1.9 命名列表切割方式123456&gt;&gt;&gt; a = [0,1,2,3,4,5]&gt;&gt;&gt; LASTTHERE = slice(-3,None)&gt;&gt;&gt; LASTTHEREslice(-3,None,None)&gt;&gt;&gt; a [LASTTHERE][3,4,5] 1.10 列表以及迭代器的压缩和解压缩1234567&gt;&gt;&gt; a = [1,2,3]&gt;&gt;&gt; b = [&apos;a&apos;,&apos;b&apos;,&apos;c&apos;]&gt;&gt;&gt; z = zip(a,b)&gt;&gt;&gt; z[(1,&apos;a&apos;),(2,&apos;b&apos;),(3,&apos;c&apos;)]&gt;&gt;&gt; zip(*z)[(1,2,3),(&apos;a&apos;,&apos;b&apos;,&apos;c&apos;)] 1.11 列表相邻元素压缩器1234567891011121314151617&gt;&gt;&gt; a = [1,2,3,4,5,6]&gt;&gt;&gt; zip(*([iter(a)]*2))[(1,2),(3,4),(5,6)]&gt;&gt;&gt; group_adjacent = lambda a, k: zip(*([iter(a)]*k))&gt;&gt;&gt; group_adjacent(a,3)[(1,2,3),(4,5,6)]&gt;&gt;&gt; group_adjacent(a,1)[(1,),(2,),(3,),(4,),(5,),(6,)]&gt;&gt;&gt; zip(a[::2],a[1::3],a[2::3])[(1, 2, 3), (4, 5, 6)]&gt;&gt;&gt; group_adjacent = lambda a,k:zip(*(a[i:k] for i in range(k)))&gt;&gt;&gt; group_adjacent(a,3)[(1, 2, 3), (4, 5, 6)]&gt;&gt;&gt; group_adjacent(a,2)[(1, 2), (3, 4), (5, 6)]&gt;&gt;&gt; group_adjacent(a, 1)[(1,), (2,), (3,), (4,), (5,), (6,)] 1.12 在列表中用压缩器和迭代器滑动取值窗口1234567891011&gt;&gt;&gt; def n_grams(a, n):... z = [iter(a[i:]) for i in range(n)]... return zip(*z)...&gt;&gt;&gt; a = [1, 2, 3, 4, 5, 6]&gt;&gt;&gt; n_grams(a, 3)[(1, 2, 3), (2, 3, 4), (3, 4, 5), (4, 5, 6)]&gt;&gt;&gt; n_grams(a, 2)[(1, 2), (2, 3), (3, 4), (4, 5), (5, 6)]&gt;&gt;&gt; n_grams(a, 4)[(1, 2, 3, 4), (2, 3, 4, 5), (3, 4, 5, 6)] 1.13 用压缩器反转字典12345678&gt;&gt;&gt; m = &#123;&apos;a&apos;: 1, &apos;b&apos;: 2, &apos;c&apos;: 3, &apos;d&apos;: 4&#125;&gt;&gt;&gt; m.items()[(&apos;a&apos;, 1), (&apos;c&apos;, 3), (&apos;b&apos;, 2), (&apos;d&apos;, 4)]&gt;&gt;&gt; zip(m.values(), m.keys())[(1, &apos;a&apos;), (3, &apos;c&apos;), (2, &apos;b&apos;), (4, &apos;d&apos;)]&gt;&gt;&gt; mi = dict(zip(m.values(), m.keys()))&gt;&gt;&gt; mi&#123;1: &apos;a&apos;, 2: &apos;b&apos;, 3: &apos;c&apos;, 4: &apos;d&apos;&#125; 1.14 列表的展开1234567&gt;&gt;&gt; a = [[1, 2], [3, 4], [5, 6]]&gt;&gt;&gt; list(itertools.chain.from_iterable(a))[1, 2, 3, 4, 5, 6]&gt;&gt;&gt; sum(a, [])[1, 2, 3, 4, 5, 6]&gt;&gt;&gt; [x for l in a for x in l][1, 2, 3, 4, 5, 6] 1.15 生成器表达式12345678910111213&gt;&gt;&gt; g = (x ** 2 for x in xrange(10))&gt;&gt;&gt; next(g)0&gt;&gt;&gt; next(g)1&gt;&gt;&gt; next(g)4&gt;&gt;&gt; next(g)9&gt;&gt;&gt; sum(x ** 3 for x in xrange(10))2025&gt;&gt;&gt; sum(x ** 3 for x in xrange(10) if x % 3 == 1)408 1.16 字典推导式1234567&gt;&gt;&gt; m = &#123;x: x ** 2 for x in range(5)&#125;&gt;&gt;&gt; m&#123;0: 0, 1: 1, 2: 4, 3: 9, 4: 16&#125;&gt;&gt;&gt; m = &#123;x: &apos;A&apos; + str(x) for x in range(10)&#125;&gt;&gt;&gt; m&#123;0: &apos;A0&apos;, 1: &apos;A1&apos;, 2: &apos;A2&apos;, 3: &apos;A3&apos;, 4: &apos;A4&apos;, 5: &apos;A5&apos;, 6: &apos;A6&apos;, 7: &apos;A7&apos;, 8: &apos;A8&apos;, 9: &apos;A9&apos;&#125; 1.17 字典反转推导式12345&gt;&gt;&gt; m = &#123;&apos;a&apos;: 1, &apos;b&apos;: 2, &apos;c&apos;: 3, &apos;d&apos;: 4&#125;&gt;&gt;&gt; m&#123;&apos;d&apos;: 4, &apos;a&apos;: 1, &apos;b&apos;: 2, &apos;c&apos;: 3&#125;&gt;&gt;&gt; &#123;v: k for k, v in m.items()&#125;&#123;1: &apos;a&apos;, 2: &apos;b&apos;, 3: &apos;c&apos;, 4: &apos;d&apos;&#125;","categories":[{"name":"Python开发","slug":"Python开发","permalink":"https://ewedwc.github.io/categories/Python开发/"}],"tags":[{"name":"Python","slug":"Python","permalink":"https://ewedwc.github.io/tags/Python/"}],"keywords":[{"name":"Python开发","slug":"Python开发","permalink":"https://ewedwc.github.io/categories/Python开发/"}]}]}